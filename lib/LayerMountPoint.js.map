{"version":3,"sources":["../src/LayerMountPoint.js"],"names":["LayerMountPoint","props","context","unsubscribe","layerStore","subscribeToLayer","id","setState","index","show","hide","update","isActive","stack","getStack","layer","getLayer","layerFn","args","contextTypes","object","defaultProps"],"mappings":"gnBAAA,8B;AACA,0C;;;;AAIqBA,e;;;;;AAKnB,2BAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AACpBD,SADoB,EACbC,OADa;AAE1B,UAAKC,WAAL,GAAmBD,QAAQE,UAAR,CAAmBC,gBAAnB,CAAoCJ,MAAMK,EAA1C,EAA8C,YAAM;AACrE,YAAKC,QAAL,CAAc,EAAd;AACD,KAFkB,CAAnB;AAGA,UAAKH,UAAL,GAAkBF,QAAQE,UAA1B,CAL0B;AAM3B,G;;AAEsB;AACrB,WAAKD,WAAL;AACA,WAAKA,WAAL,GAAmB,IAAnB;AACA,WAAKC,UAAL,GAAkB,IAAlB;AACD,K;;AAEQ;AACe,WAAKH,KADpB,KACCK,EADD,UACCA,EADD,KACKE,KADL,UACKA,KADL;AAEkC,WAAKJ,UAFvC,KAECK,KAFD,eAECA,IAFD,KAEOC,KAFP,eAEOA,IAFP,KAEaC,OAFb,eAEaA,MAFb,KAEqBC,QAFrB,eAEqBA,QAFrB;AAGP,UAAMC,QAAQ,KAAKT,UAAL,CAAgBU,QAAhB,EAAd;AACA,UAAMC,QAAQ,KAAKX,UAAL,CAAgBY,QAAhB,CAAyBV,EAAzB,CAAd;AACA,aAAOM,SAASN,EAAT,IAAeS,MAAME,OAAN,eAAc;AAClCT,oBADkC,EAC3BF,MAD2B,EACvBO,YADuB,EAChB;AAClBH,cAAM,wBAAMA,MAAKJ,EAAL,CAAN,EAF4B,EAEZ;AACtB;AACAG,cAAM,mDAAIS,IAAJ,gDAAIA,IAAJ,iCAAaT,MAAKH,EAAL,EAASY,IAAT,CAAb,EAJ4B,EAIC;AACnCP,gBAAQ,sDAAIO,IAAJ,qDAAIA,IAAJ,mCAAaP,QAAOL,EAAP,EAAWY,IAAX,CAAb,EAL0B,EAAd;AAMhBH,YAAMG,IANU,GAAf,GAMa,IANpB;AAOD,K,kEA/BkBlB,e;;;AAkCrBA,gBAAgBmB,YAAhB,GAA+B;AAC7Bf,cAAY,iBAAUgB,MADO,EAA/B;;;AAIApB,gBAAgBqB,YAAhB,GAA+B;AAC7Bb,SAAO,CADsB,EAA/B","file":"LayerMountPoint.js","sourcesContent":["import React, { Component, createElement, PropTypes} from 'react'\nimport LayerStore from './LayerStore';\n\nimport type { MountPointProps } from './types'\n\nexport default class LayerMountPoint extends Component {\n\n  props: MountPointProps;\n  layerStore: LayerStore;\n\n  constructor(props, context) {\n    super(props, context);\n    this.unsubscribe = context.layerStore.subscribeToLayer(props.id, () => {\n      this.setState({})\n    });\n    this.layerStore = context.layerStore;\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n    this.unsubscribe = null;\n    this.layerStore = null;\n  }\n\n  render() {\n    const { id, index } = this.props;\n    const { show, hide, update, isActive } = this.layerStore;\n    const stack = this.layerStore.getStack();\n    const layer = this.layerStore.getLayer(id);\n    return isActive(id) ? layer.layerFn({\n      index, id, stack, // seems like there is no valid use-case mountPointId in the Layer render function\n      hide: () => hide(id), // intention here is to hide ID's management from Layer and let app developer manage these IDs independently\n      // which will give an ability to write general-purpose Layers and share them b/w projects\n      show: (...args) => show(id, args), // sometimes you may want to change args of the current layer\n      update: (...args) => update(id, args)\n    }, ...layer.args) : null;\n  }\n}\n\nLayerMountPoint.contextTypes = {\n  layerStore: PropTypes.object\n};\n\nLayerMountPoint.defaultProps = {\n  index: 0\n};"]}