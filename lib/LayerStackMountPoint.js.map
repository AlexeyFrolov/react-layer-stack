{"version":3,"sources":["../src/LayerStackMountPoint.js"],"names":["LayerStackMountPoint","props","context","unsubscribe","layerStore","subscribeToMountPoint","id","setState","mountPointId","elementType","stack","getStack","filter","getLayer","map","index","key","getIndex","contextTypes","object","defaultProps"],"mappings":"gnBAAA,8B;AACA,oD;AACA,0C;;AAEqBA,oB;;;;AAInB,gCAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AACpBD,SADoB,EACbC,OADa;AAE1B,UAAKC,WAAL,GAAmBD,QAAQE,UAAR,CAAmBC,qBAAnB,CAAyCJ,MAAMK,EAA/C,EAAmD,YAAM;AAC1E,YAAKC,QAAL,CAAc,EAAd;AACD,KAFkB,CAAnB;AAGA,UAAKH,UAAL,GAAkBF,QAAQE,UAA1B,CAL0B;AAM3B,G;;AAEsB;AACrB,WAAKD,WAAL;AACA,WAAKA,WAAL,GAAmB,IAAnB;AACA,WAAKC,UAAL,GAAkB,IAAlB;AACD,K;;AAEQ;AACmC,WAAKH,KADxC,KACKO,YADL,UACCF,EADD,KACmBG,WADnB,UACmBA,WADnB;AAECL,gBAFD,GAEgB,IAFhB,CAECA,UAFD;AAGP,UAAMM,QAAQ,KAAKN,UAAL,CAAgBO,QAAhB,EAAd;AACA,aAAO,0BAAcF,WAAd,EAA2B,EAA3B,EAA+BC;AACnCE,YADmC,CAC5B,UAACN,EAAD,UAAQ,OAAKF,UAAL,CAAgBS,QAAhB,CAAyBP,EAAzB,EAA6BE,YAA7B,KAA8CA,YAAtD,EAD4B;AAEnCM,SAFmC,CAE9B,UAACR,EAAD,EAAKS,KAAL,UAAe,0BAAcN,WAAd,EAA2B,EAAEO,KAAKV,EAAP,EAA3B;AACnB,6DAA+B,EAAEA,MAAF,EAAMS,OAAOX,WAAWa,QAAX,CAAoBX,EAApB,CAAb,EAA/B,CADmB,CAAf,EAF8B,CAA/B,CAAP;AAID,K,uEA1BkBN,oB;;;AA6BrBA,qBAAqBkB,YAArB,GAAoC;AAClCd,cAAY,iBAAUe,MADY,EAApC;;;AAIAnB,qBAAqBoB,YAArB,GAAoC;AAClCX,eAAa,MADqB,EAApC","file":"LayerStackMountPoint.js","sourcesContent":["import React, { Component, PropTypes, createElement} from 'react';\nimport LayerMountPoint from './LayerMountPoint';\nimport LayerStore from './LayerStore'\n\nexport default class LayerStackMountPoint extends Component {\n\n  layerStore: LayerStore;\n\n  constructor(props, context) {\n    super(props, context);\n    this.unsubscribe = context.layerStore.subscribeToMountPoint(props.id, () => {\n      this.setState({})\n    });\n    this.layerStore = context.layerStore;\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n    this.unsubscribe = null;\n    this.layerStore = null;\n  }\n\n  render() {\n    const { id: mountPointId, elementType } = this.props;\n    const { layerStore } = this;\n    const stack = this.layerStore.getStack();\n    return createElement(elementType, {}, stack\n      .filter((id) => this.layerStore.getLayer(id).mountPointId === mountPointId)\n      .map ((id, index) => createElement(elementType, { key: id },\n        createElement(LayerMountPoint, { id, index: layerStore.getIndex(id) }))))\n  }\n}\n\nLayerStackMountPoint.contextTypes = {\n  layerStore: PropTypes.object\n};\n\nLayerStackMountPoint.defaultProps = {\n  elementType: 'span'\n};"]}