{"version":3,"sources":["../src/LayerStore.js"],"names":["LayerStore","_core","_mountPointsubscriptions","_layerSubscriptions","show","bind","hide","update","register","updateFn","unregister","getLayer","getStack","getIndex","isActive","id","fn","mountPointId","layerFn","groups","use","defaultArgs","defaultShow","notifyMountPoint","notifyLayer","lastMountPoint","reset","args","stack"],"mappings":"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","file":"LayerStore.js","sourcesContent":["import type { ID, LayerFn } from './types'\n\nimport LayerStoreCore from './LayerStoreCore'\n\nexport default class LayerStore {\n\n  constructor () {\n    this._core = new LayerStoreCore;\n    this._mountPointsubscriptions = {};\n    this._layerSubscriptions = {};\n\n    this.show = this.show.bind(this);\n    this.hide = this.hide.bind(this);\n    this.update = this.update.bind(this);\n    this.register = this.register.bind(this);\n    this.updateFn = this.updateFn.bind(this);\n    this.unregister = this.unregister.bind(this);\n    this.getLayer = this._core.getLayer;\n    this.getStack = this._core.getStack;\n    this.getIndex = this._core.getIndex;\n    this.isActive = this._core.isActive;\n  }\n\n  subscribeToLayer(id: ID, fn: Function) {\n    this._layerSubscriptions[id] = fn;\n    return () => {\n      delete this._layerSubscriptions[id];\n    }\n  }\n\n  notifyLayer(id: ID) {\n    if (this._layerSubscriptions[id]) {\n      this._layerSubscriptions[id]()\n    }\n  }\n\n  subscribeToMountPoint(id: ID, fn: Function) {\n    this._mountPointsubscriptions[id] = fn;\n    return () => {\n      delete this._mountPointsubscriptions[id];\n    }\n  }\n\n  notifyMountPoint(mountPointId: ID) {\n    if (this._mountPointsubscriptions[mountPointId]) {\n      this._mountPointsubscriptions[mountPointId]()\n    }\n  }\n\n  register (id: ID, layerFn: LayerFn, mountPointId: ID = null,\n            groups: Array<ID> = [], use: Array<any>, defaultArgs: Array<any> = [],\n            defaultShow: Boolean) {\n    this._core.register(id, layerFn, mountPointId, groups, use, defaultArgs, defaultShow);\n    if (mountPointId) {\n      this.notifyMountPoint(mountPointId);\n    } else {\n      this.notifyLayer(id);\n    }\n  }\n\n  updateFn (id: ID, layerFn: LayerFn, mountPointId: ID = null,\n            groups: Array<ID> = [], use: Array, defaultArgs: Array = [],\n            defaultShow: Boolean) {\n    const lastMountPoint = this.getLayer(id).mountPointId;\n    this._core.updateFn(id, layerFn, mountPointId, groups, use, defaultArgs, defaultShow);\n    if (lastMountPoint !== mountPointId) {\n      this.notifyMountPoint(lastMountPoint);\n      this.notifyMountPoint(mountPointId);\n    } else {\n      this.notifyLayer(id);\n    }\n  }\n\n  reset(id: ID) {\n    this._core.reset(id);\n    this.notifyLayer(id)\n  }\n\n  unregister(id: ID) {\n    this._core.unregister(id);\n  }\n\n  show (id: ID, args: Array) {\n    const stack = this.getStack();\n    this._core.show(id, args);\n    if (this.getLayer(id).mountPointId && stack !== this.getStack()) {\n      this.notifyMountPoint(this.getLayer(id).mountPointId);\n    } else {\n      this.notifyLayer(id);\n    }\n  }\n\n  update(id: ID, args: Array) {\n    this._core.update(id, args);\n    this.notifyLayer(id);\n  }\n\n  hide (id: ID) {\n    const stack = this.getStack();\n    this._core.hide(id);\n    if (this.getLayer(id).mountPointId && stack !== this.getStack()) {\n      this.notifyMountPoint(this.getLayer(id).mountPointId);\n    } else {\n      this.notifyLayer(id);\n    }\n  }\n}"]}