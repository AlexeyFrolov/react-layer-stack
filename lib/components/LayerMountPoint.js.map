{"version":3,"sources":["../../src/components/LayerMountPoint.js"],"names":["LayerMountPoint","props","context","unsubscribe","layerStore","subscribeToLayer","id","console","log","setState","show","hide","update","reset","isActive","stack","getStack","layer","getLayer","index","getIndex","layerFn","args","contextTypes","object","defaultProps"],"mappings":"gnBAAA,8B;AACA,6C;;;AAGqBA,e;;;;;AAKnB,2BAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AACpBD,SADoB,EACbC,OADa;AAE1B,UAAKC,WAAL,GAAmB,IAAnB;AACA,UAAKC,UAAL,GAAkBF,QAAQE,UAA1B,CAH0B;AAI3B,G;;AAEuB;AACtB,aAAO,IAAP;AACD,K;;AAEoB;AACnB,WAAKD,WAAL,GAAmB,KAAKC,UAAL,CAAgBC,gBAAhB,CAAiC,KAAKJ,KAAL,CAAWK,EAA5C,EAAgD,YAAM;AACvEC,gBAAQC,GAAR,CAAY,OAAKJ,UAAjB;AACA,eAAKK,QAAL,CAAc,EAAd;AACD,OAHkB,CAAnB;AAID,K;;AAEsB;AACrB,WAAKN,WAAL;AACA,WAAKA,WAAL,GAAmB,IAAnB;AACA,WAAKC,UAAL,GAAkB,IAAlB;AACD,K;;AAEQ;AACCE,QADD,GACQ,KAAKL,KADb,CACCK,EADD;AAEyC,WAAKF,UAF9C,KAECM,KAFD,eAECA,IAFD,KAEOC,KAFP,eAEOA,IAFP,KAEaC,OAFb,eAEaA,MAFb,KAEqBC,MAFrB,eAEqBA,KAFrB,KAE4BC,QAF5B,eAE4BA,QAF5B;AAGP,UAAMC,QAAQ,KAAKX,UAAL,CAAgBY,QAAhB,EAAd;AACA,UAAMC,QAAQ,KAAKb,UAAL,CAAgBc,QAAhB,CAAyBZ,EAAzB,CAAd;AACA,UAAMa,QAAQ,KAAKf,UAAL,CAAgBgB,QAAhB,CAAyBd,EAAzB,CAAd;AACA,aAAOQ,SAASR,EAAT,IAAeW,MAAMI,OAAN,eAAc;AAClCF,oBADkC,EAC3Bb,MAD2B,EACvBS,YADuB,EAChB;AAClBJ,cAAM,wBAAMA,MAAKL,EAAL,CAAN,EAF4B,EAEZ;AACtB;AACAI,cAAM,mDAAIY,IAAJ,gDAAIA,IAAJ,iCAAaZ,MAAKJ,EAAL,EAASgB,IAAT,CAAb,EAJ4B,EAIC;AACnCV,gBAAQ,sDAAIU,IAAJ,qDAAIA,IAAJ,mCAAaV,QAAON,EAAP,EAAWgB,IAAX,CAAb,EAL0B;AAMlCT,eAAO,yBAAMA,OAAMP,EAAN,CAAN,EAN2B,EAAd;AAOhBW,YAAMK,IAPU,GAAf,GAOa,IAPpB;AAQD,K,kEA1CkBtB,e;;;AA6CrBA,gBAAgBuB,YAAhB,GAA+B;AAC7BnB,cAAY,iBAAUoB,MADO,EAA/B;;;AAIAxB,gBAAgByB,YAAhB,GAA+B;AAC7BN,SAAO,CADsB,EAA/B","file":"LayerMountPoint.js","sourcesContent":["import React, { Component, createElement, PropTypes} from 'react'\nimport LayerStore from './../LayerStore';\nimport type { MountPointProps } from './../types'\n\nexport default class LayerMountPoint extends Component {\n\n  props: MountPointProps;\n  layerStore: LayerStore;\n\n  constructor(props, context) {\n    super(props, context);\n    this.unsubscribe = null;\n    this.layerStore = context.layerStore;\n  }\n\n  shouldComponentUpdate() {\n    return true;\n  }\n\n  componentWillMount() {\n    this.unsubscribe = this.layerStore.subscribeToLayer(this.props.id, () => {\n      console.log(this.layerStore)\n      this.setState({})\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n    this.unsubscribe = null;\n    this.layerStore = null;\n  }\n\n  render() {\n    const { id } = this.props;\n    const { show, hide, update, reset, isActive } = this.layerStore;\n    const stack = this.layerStore.getStack();\n    const layer = this.layerStore.getLayer(id);\n    const index = this.layerStore.getIndex(id);\n    return isActive(id) ? layer.layerFn({\n      index, id, stack, // seems like there is no valid use-case mountPointId in the Layer render function\n      hide: () => hide(id), // intention here is to hide ID's management from Layer and let app developer manage these IDs independently\n      // which will give an ability to write general-purpose Layers and share them b/w projects\n      show: (...args) => show(id, args), // sometimes you may want to change args of the current layer\n      update: (...args) => update(id, args),\n      reset: () => reset(id)\n    }, ...layer.args) : null;\n  }\n}\n\nLayerMountPoint.contextTypes = {\n  layerStore: PropTypes.object\n};\n\nLayerMountPoint.defaultProps = {\n  index: 0\n};"]}